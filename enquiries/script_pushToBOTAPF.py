from openpyxl import load_workbook
import sys
import os
import django
from django.utils import timezone

if os.getenv('DJANGO_DEVELOPMENT') == 'true':
    print('DEV')
    path = os.path.join('C:\\Users\\bulmaj\\OneDrive - Cambridge\\Desktop\\Dev\\Nova')
    sys.path.append(path)
    os.environ['DJANGO_SETTINGS_MODULE'] = 'redepplan.settings_dev'
elif os.getenv('DJANGO_PRODUCTION') == 'true':
    print('PROD')
    path = os.path.join('C:\\Dev\\Nova')
    sys.path.append(path)
    os.environ['DJANGO_SETTINGS_MODULE'] = 'redepplan.settings_prod'
else:
    print('UAT')
    sys.path.append('C:/Dev/redepplan')
    os.environ['DJANGO_SETTINGS_MODULE'] = 'redepplan.settings'

django.setup()

from enquiries.models import TaskManager, RpaFailureAudit, ScriptApportionment, EnquiryComponentElements, CentreEnquiryRequests, EnquiryComponents, EnquiryComponentsHistory, TaskTypes, ScaledMarks
from django.contrib.auth.models import User

ec_list = [
'1991490',
'1991740',
'1992382',
'1992386',
'1992426',
'1992434',
'1992436',
'1992440',
'1992448',
'1992450',
'1992452',
'1992456',
'1992458',
'1991804',
'1992092',
'1992128',
'1992148',
'1992150',
'1992154',
'1992158',
'1992160',
'1992162',
'1992164',
'1992166',
'1992168',
'1992170',
'1992172',
'1992176',
'1992178',
'1992182',
'1992186',
'1992184',
'1992188',
'1992190',
'1992194',
'1992192',
'1992196',
'1992198',
'1992204',
'1992210',
'1992212',
'1992214',
'1992216',
'1992218',
'1992220',
'1992224',
'1992222',
'1992226',
'1992228',
'1992238',
'1992236',
'1992240',
'1992244',
'1992242',
'1992248',
'1992246',
'1992250',
'1992252',
'1992254',
'1992256',
'1992258',
'1992260',
'1992262',
'1992264',
'1992270',
'1992362',
'1992376',
'1992374',
'1992378',
'1992380',
'1992388',
'1992390',
'1992394',
'1992392',
'1992402',
'1992408',
'1992410',
'1992412',
'1992414',
'1992416',
'1992418',
'1992420',
'1992422',
'1992424',
'1992428',
'1992430',
'1992432',
'1991924',
'1991922',
'1991930',
'1991932',
'1991946',
'1991948',
'1991950',
'1991958',
'1991960',
'1991962',
'1991964',
'1991968',
'1991972',
'1991970',
'1991974',
'1991976',
'1991978',
'1991980',
'1991982',
'1991984',
'1991986',
'1991990',
'1991992',
'1991998',
'1992000',
'1992006',
'1992010',
'1992014',
'1992016',
'1992018',
'1992020',
'1992022',
'1992026',
'1992028',
'1992030',
'1992038',
'1992040',
'1992042',
'1992044',
'1992046',
'1992048',
'1992050',
'1992056',
'1992060',
'1992062',
'1992064',
'1992066',
'1992068',
'1992078',
'1992080',
'1992082',
'1992084',
'1992086',
'1992088',
'1992096',
'1992098',
'1992100',
'1992102',
'1992104',
'1992126',
'1992130',
'1992132',
'1992134',
'1992136',
'1992140',
'1992138',
'1992144',
'1992142',
'1992146',
'1991748',
'1991766',
'1991768',
'1991770',
'1991772',
'1991776',
'1991774',
'1991780',
'1991778',
'1991782',
'1991784',
'1991786',
'1991788',
'1991790',
'1991792',
'1991796',
'1991794',
'1991798',
'1991802',
'1991800',
'1991806',
'1991810',
'1991808',
'1991814',
'1991818',
'1991816',
'1991822',
'1991820',
'1991824',
'1991826',
'1991828',
'1991836',
'1991842',
'1991838',
'1991840',
'1991844',
'1991846',
'1991848',
'1991850',
'1991852',
'1991854',
'1991856',
'1991858',
'1991860',
'1991862',
'1991864',
'1991866',
'1991868',
'1991870',
'1991872',
'1991876',
'1991874',
'1991880',
'1991878',
'1991882',
'1991884',
'1991886',
'1991892',
'1991890',
'1991898',
'1991896',
'1991902',
'1991904',
'1991906',
'1991908',
'1991910',
'1991912',
'1991914',
'1991916',
'1991918',
'1991926',
'1991928',
'1991484',
'1991486',
'1991488',
'1991492',
'1991494',
'1991500',
'1991498',
'1991502',
'1991518',
'1991540',
'1991560',
'1991562',
'1991564',
'1991582',
'1991584',
'1991586',
'1991588',
'1991590',
'1991592',
'1991594',
'1991596',
'1991598',
'1991602',
'1991604',
'1991606',
'1991608',
'1991610',
'1991612',
'1991616',
'1991614',
'1991618',
'1991620',
'1991622',
'1991624',
'1991626',
'1991630',
'1991628',
'1991634',
'1991632',
'1991636',
'1991638',
'1991640',
'1991642',
'1991644',
'1991646',
'1991652',
'1991650',
'1991654',
'1991656',
'1991666',
'1991678',
'1991680',
'1991722',
'1991724',
'1991726',
'1991728',
'1991730',
'1991732',
'1991734',
'1991736',
'1991738',
'1991742',
'1991746',
'1991744',
'1991750',
'1991754',
'1991752',
'1991756',
'1991760',
'1991758',
'1991762',
'1991764',
'1991458',

]

# def run_algo():
#     for app_task in TaskManager.objects.filter(task_id='BOTAPP', ec_sid__in = ec_list,task_completion_date = None):
#         enquiry_id = TaskManager.objects.filter(ec_sid=app_task.ec_sid.ec_sid,task_id='BOTAPP').first().enquiry_id.enquiry_id
#         #create a new task for the next step (BOTMAF)
#         if not TaskManager.objects.filter(enquiry_id=enquiry_id, task_id='BOTAPF',task_completion_date = None).exists():
#             this_task = TaskManager.objects.create(
#                 enquiry_id = CentreEnquiryRequests.objects.get(enquiry_id=enquiry_id),
#                 ec_sid = EnquiryComponents.objects.get(ec_sid=app_task.ec_sid.ec_sid),
#                 task_id = TaskTypes.objects.get(task_id = 'BOTAPF'),
#                 task_assigned_to = None,
#                 task_assigned_date = None,
#                 task_completion_date = None
#             )
#             this_task.refresh_from_db()
#             RpaFailureAudit.objects.create(
#                 rpa_task_key = TaskManager.objects.get(pk=this_task.pk),
#                 failure_reason = "Priority Manual Keying"
#             )
#             #complete the task
#             TaskManager.objects.filter(ec_sid=app_task.ec_sid.ec_sid,task_id='BOTAPP').update(task_completion_date=timezone.now())

def run_algo():
    for app_task in TaskManager.objects.filter(task_id='BOTAPP', ec_sid__in = ec_list):
        enquiry_id = TaskManager.objects.filter(ec_sid=app_task.ec_sid.ec_sid,task_id='BOTAPP').first().enquiry_id.enquiry_id
        script_id = TaskManager.objects.filter(ec_sid=app_task.ec_sid.ec_sid,task_id='BOTAPP').first().ec_sid.ec_sid
        print(enquiry_id)
        #create a new task for the next step (BOTMAF)
        if not TaskManager.objects.filter(ec_sid=script_id, task_id='BOTAPF',task_completion_date = None).exists():
            print("Switched")
            this_task = TaskManager.objects.create(
                enquiry_id = CentreEnquiryRequests.objects.get(enquiry_id=enquiry_id),
                ec_sid = EnquiryComponents.objects.get(ec_sid=app_task.ec_sid.ec_sid),
                task_id = TaskTypes.objects.get(task_id = 'BOTAPF'),
                task_assigned_to = None,
                task_assigned_date = None,
                task_completion_date = None
            )
            this_task.refresh_from_db()
            RpaFailureAudit.objects.create(
                rpa_task_key = TaskManager.objects.get(pk=this_task.pk),
                failure_reason = "Priority Manual Keying"
            )
            #complete the task
            TaskManager.objects.filter(ec_sid=app_task.ec_sid.ec_sid,task_id='BOTAPP').update(task_completion_date=timezone.now())
        else:
            print("Not Switched")


run_algo()